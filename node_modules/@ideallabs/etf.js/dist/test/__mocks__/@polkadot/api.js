var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// __mocks__/@polkadot/api.js
export class ApiPromise {
    static create(options) {
        const mockApi = new ApiPromise();
        return Promise.resolve(mockApi);
    }
    constructor() {
        this.isReady = Promise.resolve();
        this.rpc = {
            state: {
                getMetadata: () => __awaiter(this, void 0, void 0, function* () {
                    return ({
                        toHex: () => 'mockMetadataHex',
                    });
                }),
            },
            chain: {
                subscribeNewHeads: () => __awaiter(this, void 0, void 0, function* () { }),
                getHeader: () => __awaiter(this, void 0, void 0, function* () {
                    return {
                        digest: {
                            logs: [
                                {
                                    toHuman: () => {
                                        return {
                                            PreRuntime: [
                                                {
                                                // intentionally left empty
                                                },
                                                {
                                                    toJSON: () => {
                                                        return {
                                                            secret: '0x01010101010',
                                                        };
                                                    },
                                                },
                                            ],
                                        };
                                    },
                                },
                            ],
                        },
                    };
                }),
            },
        };
        this.query = {
            etf: {
                ibeParams: () => __awaiter(this, void 0, void 0, function* () { return ['param1', 'param2']; }),
            },
            system: {
                blockHash: () => __awaiter(this, void 0, void 0, function* () { return '0xBlockHash'; }),
            },
        };
    }
}
export class WsProvider {
    constructor(endpoint) {
        // Store endpoint value or implement other logic
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            // Simulate connecting logic or implement other behavior
            console.log('Mock WsProvider connected');
        });
    }
}
