/* tslint:disable */
/* eslint-disable */
/**
* @returns {any}
*/
export function random_ibe_params(): any;
/**
* @param {any} x
* @param {any} ids_bytes
* @returns {any}
*/
export function ibe_extract(x: any, ids_bytes: any): any;
/**
* a wrapper around the DefaultEtfClient so that it can be compiled to wasm
*/
export class EtfApiWrapper {
  free(): void;
/**
* p and q are the IBE parameters, both elements of G2
* @param {any} p
* @param {any} q
*/
  constructor(p: any, q: any);
/**
* @returns {any}
*/
  version(): any;
/**
* a wrapper function around the DefaultApi 'encrypt' implementation
* returns a ciphertext blob containing both aes ct and etf ct
*
* @param {any} message_bytes
* @param {any} slot_id_bytes
* @param {number} t
* @param {any} seed_bytes
* @returns {any}
*/
  encrypt(message_bytes: any, slot_id_bytes: any, t: number, seed_bytes: any): any;
/**
* @param {any} ciphertext_bytes
* @param {any} nonce_bytes
* @param {any} capsule_bytes
* @param {any} sks_bytes
* @returns {any}
*/
  decrypt(ciphertext_bytes: any, nonce_bytes: any, capsule_bytes: any, sks_bytes: any): any;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_etfapiwrapper_free: (a: number) => void;
  readonly etfapiwrapper_version: (a: number) => number;
  readonly etfapiwrapper_encrypt: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly etfapiwrapper_decrypt: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly random_ibe_params: (a: number) => void;
  readonly ibe_extract: (a: number, b: number, c: number) => void;
  readonly etfapiwrapper_create: (a: number, b: number) => number;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_exn_store: (a: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
