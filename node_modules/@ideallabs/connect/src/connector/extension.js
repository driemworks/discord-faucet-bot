"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScClient = void 0;
var types_js_1 = require("./types.js");
var index_js_1 = require("./specs/index.js");
var listeners = new Map();
if (typeof window === "object") {
    window.addEventListener("message", function (_a) {
        var _b;
        var data = _a.data;
        if ((data === null || data === void 0 ? void 0 : data.origin) !== "substrate-connect-extension")
            return;
        (_b = listeners.get(data.chainId)) === null || _b === void 0 ? void 0 : _b(data);
    });
}
function getRandomChainId() {
    var arr = new BigUint64Array(2);
    // It can only be used from the browser, so this is fine.
    crypto.getRandomValues(arr);
    var result = (arr[1] << BigInt(64)) | arr[0];
    return result.toString(36);
}
/**
 * Returns a {@link ScClient} that connects to chains by asking the substrate-connect extension
 * to do so.
 *
 * This function assumes that the extension is installed and available. It is out of scope of this
 * function to detect whether this is the case.
 * If you try to add a chain without the extension installed, nothing will happen and the
 * `Promise`s will never resolve.
 */
var createScClient = function () {
    var chains = new Map();
    var internalAddChain = function (isWellKnown, chainSpecOrWellKnownName, jsonRpcCallback, potentialRelayChainIds) {
        if (potentialRelayChainIds === void 0) { potentialRelayChainIds = []; }
        return __awaiter(void 0, void 0, void 0, function () {
            var resolve, initFinished, chainState, resolve_1, initFinished_1, chain;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        initFinished = new Promise(function (res) {
                            resolve = function () { return res(null); };
                        });
                        chainState = {
                            id: getRandomChainId(),
                            state: {
                                state: "pending",
                                waitFinished: resolve,
                            },
                        };
                        if (listeners.has(chainState.id))
                            throw new Error("Unexpectedly randomly generated the same chain ID twice despite 64bits of entropy");
                        // Setup the listener for this chain.
                        // This listener should never be removed until we are no longer interested in this chain.
                        // Removing then re-adding the listener could cause messages to be missed.
                        listeners.set(chainState.id, function (msg) {
                            switch (chainState.state.state) {
                                case "pending": {
                                    var waitFinished = chainState.state.waitFinished;
                                    switch (msg.type) {
                                        case "chain-ready": {
                                            chainState.state = {
                                                state: "ok",
                                            };
                                            break;
                                        }
                                        case "error": {
                                            chainState.state = {
                                                state: "dead",
                                                error: new types_js_1.CrashError("Error while creating the chain: " + msg.errorMessage),
                                            };
                                            break;
                                        }
                                        default: {
                                            // Unexpected message. We ignore it.
                                            // While it could be tempting to switch the chain to `dead`, the extension might
                                            // think that the chain is still alive, and the state mismatch could have
                                            // unpredictable and confusing consequences.
                                            console.warn("Unexpected message of type `msg.type` received from substrate-connect extension");
                                        }
                                    }
                                    waitFinished();
                                    break;
                                }
                                case "ok": {
                                    switch (msg.type) {
                                        case "error": {
                                            chainState.state = {
                                                state: "dead",
                                                error: new types_js_1.CrashError("Extension has killed the chain: " + msg.errorMessage),
                                            };
                                            break;
                                        }
                                        case "rpc": {
                                            if (jsonRpcCallback) {
                                                jsonRpcCallback(msg.jsonRpcMessage);
                                            }
                                            else {
                                                console.warn("Unexpected message of type `msg.type` received from substrate-connect extension");
                                            }
                                            break;
                                        }
                                        default: {
                                            // Unexpected message. We ignore it.
                                            // While it could be tempting to switch the chain to `dead`, the extension might
                                            // think that the chain is still alive, and the state mismatch could have
                                            // unpredictable and confusing consequences.
                                            console.warn("Unexpected message of type `msg.type` received from substrate-connect extension");
                                        }
                                    }
                                    break;
                                }
                                case "dead": {
                                    // We don't expect any message anymore.
                                    break;
                                }
                            }
                        });
                        // Now that everything is ready to receive messages back from the extension, send the
                        // add-chain message.
                        if (isWellKnown) {
                            postToExtension({
                                origin: "substrate-connect-client",
                                chainId: chainState.id,
                                type: "add-well-known-chain",
                                chainName: chainSpecOrWellKnownName,
                            });
                        }
                        else {
                            postToExtension({
                                origin: "substrate-connect-client",
                                chainId: chainState.id,
                                type: "add-chain",
                                chainSpec: chainSpecOrWellKnownName,
                                potentialRelayChainIds: potentialRelayChainIds,
                            });
                        }
                        // Wait for the extension to send back either a confirmation or an error.
                        // Note that `initFinished` becomes ready when `chainState` has been modified. The outcome
                        // can be known by looking into `chainState`.
                        return [4 /*yield*/, initFinished
                            // In the situation where we tried to create a well-known chain, the extension isn't supposed
                            // to ever return an error. There is however one situation where errors can happen: if the
                            // extension doesn't recognize the desired well-known chain because it uses a different list
                            // of well-known chains than this code. To handle this, we download the chain spec of the
                            // desired well-known chain and try again but this time as a non-well-known chain.
                        ];
                    case 1:
                        // Wait for the extension to send back either a confirmation or an error.
                        // Note that `initFinished` becomes ready when `chainState` has been modified. The outcome
                        // can be known by looking into `chainState`.
                        _a.sent();
                        if (!(isWellKnown && chainState.state.state === "dead")) return [3 /*break*/, 3];
                        initFinished_1 = new Promise(function (res) {
                            resolve_1 = function () { return res(null); };
                        });
                        chainState.state = {
                            state: "pending",
                            waitFinished: resolve_1,
                        };
                        postToExtension({
                            origin: "substrate-connect-client",
                            chainId: chainState.id,
                            type: "add-chain",
                            chainSpec: (0, index_js_1.getSpec)(chainSpecOrWellKnownName),
                            potentialRelayChainIds: [],
                        });
                        return [4 /*yield*/, initFinished_1];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        // Now check the `chainState` to know if things have succeeded.
                        if (chainState.state.state === "dead") {
                            throw chainState.state.error;
                        }
                        chain = {
                            sendJsonRpc: function (jsonRpcMessage) {
                                if (chainState.state.state === "dead") {
                                    throw chainState.state.error;
                                }
                                if (!jsonRpcCallback)
                                    throw new types_js_1.JsonRpcDisabledError();
                                postToExtension({
                                    origin: "substrate-connect-client",
                                    chainId: chainState.id,
                                    type: "rpc",
                                    jsonRpcMessage: jsonRpcMessage,
                                });
                            },
                            remove: function () {
                                if (chainState.state.state === "dead") {
                                    throw chainState.state.error;
                                }
                                chainState.state = {
                                    state: "dead",
                                    error: new types_js_1.AlreadyDestroyedError(),
                                };
                                listeners.delete(chainState.id);
                                chains.delete(chain);
                                postToExtension({
                                    origin: "substrate-connect-client",
                                    chainId: chainState.id,
                                    type: "remove-chain",
                                });
                            },
                        };
                        // This mapping of chains is kept just for the `potentialRelayChainIds` field.
                        chains.set(chain, chainState.id);
                        return [2 /*return*/, chain];
                }
            });
        });
    };
    return {
        addChain: function (chainSpec, jsonRpcCallback) {
            return internalAddChain(false, chainSpec, jsonRpcCallback, __spreadArray([], __read(chains.values()), false));
        },
        addWellKnownChain: function (name, jsonRpcCallback) { return internalAddChain(true, name, jsonRpcCallback); },
    };
};
exports.createScClient = createScClient;
// Sends a message to the extension. This function primarly exists in order to provide strong
// typing for the message.
function postToExtension(msg) {
    window.postMessage(msg, "*");
}
//# sourceMappingURL=extension.js.map