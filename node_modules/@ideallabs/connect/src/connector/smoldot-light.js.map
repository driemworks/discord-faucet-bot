{"version":3,"file":"smoldot-light.js","sourceRoot":"","sources":["smoldot-light.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Chain as SChain,\n  Client,\n  ClientOptions,\n  MalformedJsonRpcError,\n  QueueFullError,\n} from \"@ideallabs/smoldot\"\nimport { getSpec } from \"./specs/index.js\"\nimport {\n  AddChain,\n  AddWellKnownChain,\n  Chain,\n  ScClient,\n  AlreadyDestroyedError,\n  CrashError,\n  JsonRpcDisabledError,\n} from \"./types.js\"\nimport { WellKnownChain } from \"../WellKnownChain.js\"\n\nlet startPromise: Promise<(options: ClientOptions) => Client> | null = null\nconst getStart = () => {\n  if (startPromise) return startPromise\n  startPromise = import(\"@ideallabs/smoldot\").then((sm) => sm.start)\n  return startPromise\n}\n\nconst clientReferences: Config[] = [] // Note that this can't be a set, as the same config is added/removed multiple times\nlet clientPromise: Promise<Client> | Client | null = null\nlet clientReferencesMaxLogLevel = 3\nconst getClientAndIncRef = (config: Config): Promise<Client> => {\n  if (config.maxLogLevel && config.maxLogLevel > clientReferencesMaxLogLevel)\n    clientReferencesMaxLogLevel = config.maxLogLevel\n\n  if (clientPromise) {\n    clientReferences.push(config)\n    if (clientPromise instanceof Promise) return clientPromise\n    else return Promise.resolve(clientPromise)\n  }\n\n  const newClientPromise = getStart().then((start) =>\n    start({\n      forbidTcp: true, // In order to avoid confusing inconsistencies between browsers and NodeJS, TCP connections are always disabled.\n      forbidNonLocalWs: true, // Prevents browsers from emitting warnings if smoldot tried to establish non-secure WebSocket connections\n      maxLogLevel: 9999999, // The actual level filtering is done in the logCallback\n      cpuRateLimit: 0.5, // Politely limit the CPU usage of the smoldot background worker.\n      logCallback: (level, target, message) => {\n        if (level > clientReferencesMaxLogLevel) return\n\n        // The first parameter of the methods of `console` has some printf-like substitution\n        // capabilities. We don't really need to use this, but not using it means that the logs\n        // might not get printed correctly if they contain `%`.\n        if (level <= 1) {\n          console.error(\"[%s] %s\", target, message)\n        } else if (level === 2) {\n          console.warn(\"[%s] %s\", target, message)\n        } else if (level === 3) {\n          console.info(\"[%s] %s\", target, message)\n        } else if (level === 4) {\n          console.debug(\"[%s] %s\", target, message)\n        } else {\n          console.trace(\"[%s] %s\", target, message)\n        }\n      },\n    }),\n  )\n\n  clientPromise = newClientPromise\n\n  newClientPromise.then((client) => {\n    // Make sure that the client we have just created is still desired\n    if (clientPromise === newClientPromise) clientPromise = client\n    else client.terminate()\n    // Note that if clientPromise != newClientPromise we know for sure that the client that we\n    // return isn't going to be used. We would rather not return a terminated client, but this\n    // isn't possible for type check reasons.\n    return client\n  })\n\n  clientReferences.push(config)\n  return clientPromise\n}\n\n// Must be passed the exact same object as was passed to {getClientAndIncRef}\nconst decRef = (config: Config) => {\n  const idx = clientReferences.indexOf(config)\n  if (idx === -1) throw new Error(\"Internal error within smoldot\")\n  clientReferences.splice(idx, 1)\n\n  // Update `clientReferencesMaxLogLevel`\n  // Note how it is set back to 3 if there is no reference anymore\n  clientReferencesMaxLogLevel = 3\n  for (const cfg of clientReferences.values()) {\n    if (cfg.maxLogLevel && cfg.maxLogLevel > clientReferencesMaxLogLevel)\n      clientReferencesMaxLogLevel = cfg.maxLogLevel\n  }\n\n  if (clientReferences.length === 0) {\n    if (clientPromise && !(clientPromise instanceof Promise))\n      clientPromise.terminate()\n    clientPromise = null\n  }\n}\n\nconst transformErrors = (thunk: () => void) => {\n  try {\n    thunk()\n  } catch (e) {\n    const error = e as Error | undefined\n    if (error?.name === \"JsonRpcDisabledError\") throw new JsonRpcDisabledError()\n    if (error?.name === \"CrashError\") throw new CrashError(error.message)\n    if (error?.name === \"AlreadyDestroyedError\")\n      throw new AlreadyDestroyedError()\n    throw new CrashError(\n      e instanceof Error ? e.message : `Unexpected error ${e}`,\n    )\n  }\n}\n\n/**\n * Configuration that can be passed to {createScClient}.\n */\nexport interface Config {\n  /**\n   * The client prints logs in the console. By default, only log levels 1, 2, and 3 (corresponding\n   * respectively to ERROR, WARN, and INFO) are printed.\n   *\n   * In order to more easily debug problems, you can pass 4 (DEBUG) or more.\n   *\n   * This setting is only taken into account between the moment when you use this chain to add a\n   * chain for the first time, and the moment when all the chains that you have added have been\n   * removed.\n   *\n   * If {createScClient} is called multiple times with multiple different log levels, the highest\n   * value will be used.\n   */\n  maxLogLevel?: number\n}\n\n/**\n * Returns a {ScClient} that connects to chains by executing a light client directly\n * from JavaScript.\n *\n * This is quite expensive in terms of CPU, but it is the only choice when the substrate-connect\n * extension is not installed.\n */\nexport const createScClient = (config?: Config): ScClient => {\n  const configOrDefault = config || { maxLogLevel: 3 }\n\n  const chains = new Map<Chain, SChain>()\n\n  const addChain: AddChain = async (\n    chainSpec: string,\n    jsonRpcCallback?: (msg: string) => void,\n  ): Promise<Chain> => {\n    const client = await getClientAndIncRef(configOrDefault)\n\n    try {\n      const internalChain = await client.addChain({\n        chainSpec,\n        potentialRelayChains: [...chains.values()],\n        disableJsonRpc: jsonRpcCallback === undefined,\n      })\n\n      ;(async () => {\n        while (true) {\n          let jsonRpcResponse\n          try {\n            jsonRpcResponse = await internalChain.nextJsonRpcResponse()\n          } catch (_) {\n            break\n          }\n\n          // `nextJsonRpcResponse` throws an exception if we pass `disableJsonRpc: true` in the\n          // config. We pass `disableJsonRpc: true` if `jsonRpcCallback` is undefined. Therefore,\n          // this code is never reachable if `jsonRpcCallback` is undefined.\n          try {\n            jsonRpcCallback!(jsonRpcResponse)\n          } catch (error) {\n            console.error(\"JSON-RPC callback has thrown an exception:\", error)\n          }\n        }\n      })()\n\n      const chain: Chain = {\n        sendJsonRpc: (rpc) => {\n          transformErrors(() => {\n            try {\n              internalChain.sendJsonRpc(rpc)\n            } catch (error) {\n              if (error instanceof MalformedJsonRpcError) {\n                // In order to expose the same behavior as the extension client, we silently\n                // discard malformed JSON-RPC requests.\n                return\n              } else if (error instanceof QueueFullError) {\n                // If the queue is full, we immediately send back a JSON-RPC response indicating\n                // the error.\n                try {\n                  const parsedRq = JSON.parse(rpc)\n                  jsonRpcCallback!(\n                    JSON.stringify({\n                      jsonrpc: \"v2\",\n                      id: parsedRq.id,\n                      error: {\n                        code: -32000,\n                        message: \"JSON-RPC server is too busy\",\n                      },\n                    }),\n                  )\n                } catch (_error) {\n                  // An error here counts as a malformed JSON-RPC request, which are ignored.\n                }\n              } else {\n                throw error\n              }\n            }\n          })\n        },\n        remove: () => {\n          try {\n            transformErrors(() => {\n              internalChain.remove()\n            })\n          } finally {\n            chains.delete(chain)\n            decRef(configOrDefault)\n          }\n        },\n      }\n\n      chains.set(chain, internalChain)\n      return chain\n    } catch (error) {\n      decRef(configOrDefault)\n      throw error\n    }\n  }\n\n  const addWellKnownChain: AddWellKnownChain = async (\n    supposedChain: WellKnownChain,\n    jsonRpcCallback?: (msg: string) => void,\n  ): Promise<Chain> => {\n    // the following line ensures that the http request for the dynamic import\n    // of smoldot and the request for the dynamic import of the spec\n    // happen in parallel\n    getClientAndIncRef(configOrDefault)\n\n    try {\n      const spec = getSpec(supposedChain)\n      return await addChain(spec, jsonRpcCallback)\n    } finally {\n      decRef(configOrDefault)\n    }\n  }\n  return { addChain, addWellKnownChain }\n}\n"]}