"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScClient = void 0;
var smoldot_1 = require("@ideallabs/smoldot");
var index_js_1 = require("./specs/index.js");
var types_js_1 = require("./types.js");
var startPromise = null;
var getStart = function () {
    if (startPromise)
        return startPromise;
    startPromise = Promise.resolve().then(function () { return __importStar(require("@ideallabs/smoldot")); }).then(function (sm) { return sm.start; });
    return startPromise;
};
var clientReferences = []; // Note that this can't be a set, as the same config is added/removed multiple times
var clientPromise = null;
var clientReferencesMaxLogLevel = 3;
var getClientAndIncRef = function (config) {
    if (config.maxLogLevel && config.maxLogLevel > clientReferencesMaxLogLevel)
        clientReferencesMaxLogLevel = config.maxLogLevel;
    if (clientPromise) {
        clientReferences.push(config);
        if (clientPromise instanceof Promise)
            return clientPromise;
        else
            return Promise.resolve(clientPromise);
    }
    var newClientPromise = getStart().then(function (start) {
        return start({
            forbidTcp: true,
            forbidNonLocalWs: true,
            maxLogLevel: 9999999,
            cpuRateLimit: 0.5,
            logCallback: function (level, target, message) {
                if (level > clientReferencesMaxLogLevel)
                    return;
                // The first parameter of the methods of `console` has some printf-like substitution
                // capabilities. We don't really need to use this, but not using it means that the logs
                // might not get printed correctly if they contain `%`.
                if (level <= 1) {
                    console.error("[%s] %s", target, message);
                }
                else if (level === 2) {
                    console.warn("[%s] %s", target, message);
                }
                else if (level === 3) {
                    console.info("[%s] %s", target, message);
                }
                else if (level === 4) {
                    console.debug("[%s] %s", target, message);
                }
                else {
                    console.trace("[%s] %s", target, message);
                }
            },
        });
    });
    clientPromise = newClientPromise;
    newClientPromise.then(function (client) {
        // Make sure that the client we have just created is still desired
        if (clientPromise === newClientPromise)
            clientPromise = client;
        else
            client.terminate();
        // Note that if clientPromise != newClientPromise we know for sure that the client that we
        // return isn't going to be used. We would rather not return a terminated client, but this
        // isn't possible for type check reasons.
        return client;
    });
    clientReferences.push(config);
    return clientPromise;
};
// Must be passed the exact same object as was passed to {getClientAndIncRef}
var decRef = function (config) {
    var e_1, _a;
    var idx = clientReferences.indexOf(config);
    if (idx === -1)
        throw new Error("Internal error within smoldot");
    clientReferences.splice(idx, 1);
    // Update `clientReferencesMaxLogLevel`
    // Note how it is set back to 3 if there is no reference anymore
    clientReferencesMaxLogLevel = 3;
    try {
        for (var _b = __values(clientReferences.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var cfg = _c.value;
            if (cfg.maxLogLevel && cfg.maxLogLevel > clientReferencesMaxLogLevel)
                clientReferencesMaxLogLevel = cfg.maxLogLevel;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (clientReferences.length === 0) {
        if (clientPromise && !(clientPromise instanceof Promise))
            clientPromise.terminate();
        clientPromise = null;
    }
};
var transformErrors = function (thunk) {
    try {
        thunk();
    }
    catch (e) {
        var error = e;
        if ((error === null || error === void 0 ? void 0 : error.name) === "JsonRpcDisabledError")
            throw new types_js_1.JsonRpcDisabledError();
        if ((error === null || error === void 0 ? void 0 : error.name) === "CrashError")
            throw new types_js_1.CrashError(error.message);
        if ((error === null || error === void 0 ? void 0 : error.name) === "AlreadyDestroyedError")
            throw new types_js_1.AlreadyDestroyedError();
        throw new types_js_1.CrashError(e instanceof Error ? e.message : "Unexpected error ".concat(e));
    }
};
/**
 * Returns a {ScClient} that connects to chains by executing a light client directly
 * from JavaScript.
 *
 * This is quite expensive in terms of CPU, but it is the only choice when the substrate-connect
 * extension is not installed.
 */
var createScClient = function (config) {
    var configOrDefault = config || { maxLogLevel: 3 };
    var chains = new Map();
    var addChain = function (chainSpec, jsonRpcCallback) { return __awaiter(void 0, void 0, void 0, function () {
        var client, internalChain_1, chain_1, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getClientAndIncRef(configOrDefault)];
                case 1:
                    client = _a.sent();
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, client.addChain({
                            chainSpec: chainSpec,
                            potentialRelayChains: __spreadArray([], __read(chains.values()), false),
                            disableJsonRpc: jsonRpcCallback === undefined,
                        })];
                case 3:
                    internalChain_1 = _a.sent();
                    (function () { return __awaiter(void 0, void 0, void 0, function () {
                        var jsonRpcResponse, _1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!true) return [3 /*break*/, 5];
                                    jsonRpcResponse = void 0;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, internalChain_1.nextJsonRpcResponse()];
                                case 2:
                                    jsonRpcResponse = _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    _1 = _a.sent();
                                    return [3 /*break*/, 5];
                                case 4:
                                    // `nextJsonRpcResponse` throws an exception if we pass `disableJsonRpc: true` in the
                                    // config. We pass `disableJsonRpc: true` if `jsonRpcCallback` is undefined. Therefore,
                                    // this code is never reachable if `jsonRpcCallback` is undefined.
                                    try {
                                        jsonRpcCallback(jsonRpcResponse);
                                    }
                                    catch (error) {
                                        console.error("JSON-RPC callback has thrown an exception:", error);
                                    }
                                    return [3 /*break*/, 0];
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); })();
                    chain_1 = {
                        sendJsonRpc: function (rpc) {
                            transformErrors(function () {
                                try {
                                    internalChain_1.sendJsonRpc(rpc);
                                }
                                catch (error) {
                                    if (error instanceof smoldot_1.MalformedJsonRpcError) {
                                        // In order to expose the same behavior as the extension client, we silently
                                        // discard malformed JSON-RPC requests.
                                        return;
                                    }
                                    else if (error instanceof smoldot_1.QueueFullError) {
                                        // If the queue is full, we immediately send back a JSON-RPC response indicating
                                        // the error.
                                        try {
                                            var parsedRq = JSON.parse(rpc);
                                            jsonRpcCallback(JSON.stringify({
                                                jsonrpc: "v2",
                                                id: parsedRq.id,
                                                error: {
                                                    code: -32000,
                                                    message: "JSON-RPC server is too busy",
                                                },
                                            }));
                                        }
                                        catch (_error) {
                                            // An error here counts as a malformed JSON-RPC request, which are ignored.
                                        }
                                    }
                                    else {
                                        throw error;
                                    }
                                }
                            });
                        },
                        remove: function () {
                            try {
                                transformErrors(function () {
                                    internalChain_1.remove();
                                });
                            }
                            finally {
                                chains.delete(chain_1);
                                decRef(configOrDefault);
                            }
                        },
                    };
                    chains.set(chain_1, internalChain_1);
                    return [2 /*return*/, chain_1];
                case 4:
                    error_1 = _a.sent();
                    decRef(configOrDefault);
                    throw error_1;
                case 5: return [2 /*return*/];
            }
        });
    }); };
    var addWellKnownChain = function (supposedChain, jsonRpcCallback) { return __awaiter(void 0, void 0, void 0, function () {
        var spec;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // the following line ensures that the http request for the dynamic import
                    // of smoldot and the request for the dynamic import of the spec
                    // happen in parallel
                    getClientAndIncRef(configOrDefault);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    spec = (0, index_js_1.getSpec)(supposedChain);
                    return [4 /*yield*/, addChain(spec, jsonRpcCallback)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    decRef(configOrDefault);
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    }); };
    return { addChain: addChain, addWellKnownChain: addWellKnownChain };
};
exports.createScClient = createScClient;
//# sourceMappingURL=smoldot-light.js.map